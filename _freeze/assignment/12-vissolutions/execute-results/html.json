{
  "hash": "27d32e59f056e1a8763466055de6bced",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 10 Solutions: Data Visualization\"\n---\n\n\n\n<span style=\"color:#9F281A;\">Get data to visualize.</span>\n\n> I chose to visualize Venus flytrap locations and soil nitrogen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries\nlibrary(rgbif)\nlibrary(geodata)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: terra\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nterra 1.7.78\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(terra)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract() masks terra::extract()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidycensus)\n\n# load data\n# get a selection of 1000 Vensu flytrap observations from rgbif\nvflytrap_us <- occ_search(scientificName = \"Dionaea muscipula\", \n                             country = \"US\",\n                             hasCoordinate = TRUE,\n                             limit=1000)\n\n# geodata raster\nsoils <- geodata::soil_world(var = \"nitrogen\", depth=5, path=tempfile())\n\n# boundaries\ngeodata::gadm(country = \"USA\", level=1, path=tempfile())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n class       : SpatVector \n geometry    : polygons \n dimensions  : 51, 11  (geometries, attributes)\n extent      : -179.1506, 179.7734, 18.90986, 72.6875  (xmin, xmax, ymin, ymax)\n coord. ref. : lon/lat WGS 84 (EPSG:4326) \n names       :   GID_1 GID_0       COUNTRY  NAME_1 VARNAME_1 NL_NAME_1 TYPE_1\n type        :   <chr> <chr>         <chr>   <chr>     <chr>     <chr>  <chr>\n values      : USA.1_1   USA United States Alabama   AL|Ala.        NA  State\n               USA.2_1   USA United States  Alaska AK|Alaska        NA  State\n               USA.3_1   USA United States Arizona  AZ|Ariz.        NA  State\n ENGTYPE_1  CC_1 HASC_1 ISO_1\n     <chr> <chr>  <chr> <chr>\n     State    NA  US.AL US-AL\n     State    NA  US.AK US-AK\n     State    NA  US.AZ US-AZ\n```\n\n\n:::\n:::\n\n\n\n<span style=\"color:#9F281A;\">Write pseudocode for how you will prepare your data for visualization, then execute your plan. Some possible objectives might be cropping your data to an area of interest and transforming the data to tidy format.</span>",
    "supporting": [
      "12-vissolutions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}