{
  "hash": "9422ce1f6445eaf3e4146a45ae6b7a51",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Session 7 Live Code\"\nauthor: \"Carolyn Koehn\"\nformat: html\n---\n\n\n### Read in the libraries we need\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tigris)\n```\n:::\n\n\n\n\n### Get a sf object of ID counties (from the `tigris` package)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid.cty <- counties(state = \"ID\")\n```\n:::\n\n\n\n\n### Check CRS of object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(id.cty)$input\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"NAD83\"\n```\n\n\n:::\n:::\n\n\n### Unary predicates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_is_longlat(id.cty)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nst_is_valid(id.cty)[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nall(st_is_valid(id.cty))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n### Get some data for binary operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nid <- states(progress_bar=FALSE) %>% \n  filter(STUSPS == \"ID\")\nor <- states(progress_bar=FALSE) %>% \n  filter(STUSPS == \"OR\")\nada.cty <- id.cty %>% \n  filter(NAME == \"Ada\")\n```\n:::\n\n\n\n\n### Try some predicates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_covers(id, ada.cty)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 1, where the predicate\nwas `covers'\n 1: 1\n```\n\n\n:::\n\n```{.r .cell-code}\nst_covers(id, ada.cty, sparse = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_within(ada.cty, or)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 1, where the predicate\nwas `within'\n 1: (empty)\n```\n\n\n:::\n\n```{.r .cell-code}\nst_within(ada.cty, or, sparse=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1]\n[1,] FALSE\n```\n\n\n:::\n:::\n\n\n### Unary measures\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_area(id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2.15994e+11 [m^2]\n```\n\n\n:::\n\n```{.r .cell-code}\nst_area(id.cty)[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnits: [m^2]\n[1] 2858212132 3380630278 1459359818 1726660462 1223521586\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_dimension(id.cty)[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2 2 2 2\n```\n\n\n:::\n:::\n\n\n### Binary measure (distance)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkootenai.cty <- id.cty %>% \n  filter(NAME == \"Kootenai\")\nst_distance(kootenai.cty, ada.cty)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnits: [m]\n         [,1]\n[1,] 396433.8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_distance(id.cty)[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnits: [m]\n         [,1]     [,2]     [,3]     [,4]     [,5]\n[1,]      0.0 467635.7 277227.0 132998.0      0.0\n[2,] 467635.7      0.0 319706.4 656056.0 514306.9\n[3,] 277227.0 319706.4      0.0 377105.4 336146.8\n[4,] 132998.0 656056.0 377105.4      0.0 133045.5\n[5,]      0.0 514306.9 336146.8 133045.5      0.0\n```\n\n\n:::\n:::\n\n\n### Practice exercise code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Part 1\nowyhee.cty <- id.cty %>% \n  filter(NAME == \"Owyhee\")\n\n# Part 2\nst_within(owyhee.cty, id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 1, where the predicate\nwas `within'\n 1: 1\n```\n\n\n:::\n\n```{.r .cell-code}\nst_touches(owyhee.cty, or)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 1, where the predicate\nwas `touches'\n 1: 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Part 3\nst_bbox(owyhee.cty)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      xmin       ymin       xmax       ymax \n-117.02701   41.99612 -115.03751   43.68080 \n```\n\n\n:::\n\n```{.r .cell-code}\nst_bbox(or)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      xmin       ymin       xmax       ymax \n-124.70354   41.99208 -116.46326   46.29910 \n```\n\n\n:::\n:::\n\n\n### Challenge code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between all counties\ncty.dist <- st_distance(id.cty)\n\n# Label rows and columns of matrix\ncolnames(cty.dist) <- id.cty$NAME\nrownames(cty.dist) <- id.cty$NAME\n\n# Find where the maximum value is\nwhich(cty.dist == max(cty.dist), arr.ind = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         row col\nBoundary  40   4\nFranklin   4  40\n```\n\n\n:::\n\n```{.r .cell-code}\n# Locate the counties at the row numbers returned by which\n# Needed if you don't label the rows and columns\nid.cty$NAME[c(4, 40)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Franklin\" \"Boundary\"\n```\n\n\n:::\n:::\n\n\n### Whiteboard notes\n\n![](img/session_07_whiteboard.jpg)",
    "supporting": [
      "session-07-example_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}