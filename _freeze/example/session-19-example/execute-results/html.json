{
  "hash": "aa8a358ae4bd299506170e5d4f633f39",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Session 19 code\"\nauthor: \"Carolyn Koehn\"\nformat: html\n---\n\n\n\nLoad libraries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nlibrary(tmap)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(spatstat)  # Used for the dirichlet tesselation function\nlibrary(sp)\n```\n:::\n\n\n\nGet data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naq <- read_csv(\"/opt/data/data/classexamples/ad_viz_plotval_data_PM25_2024_ID.csv\") %>% \n  st_as_sf(., coords = c(\"Site Longitude\", \"Site Latitude\"), crs = \"EPSG:4326\") %>% \n  st_transform(., crs = \"EPSG:8826\") %>% \n  mutate(date = as_date(parse_datetime(Date, \"%m/%d/%Y\"))) %>% \n  filter(., date >= 2024-07-01) %>% \n  filter(., date > \"2024-07-01\" & date < \"2024-07-31\")\naq.sum <- aq %>% \n  group_by(., `Site ID`) %>% \n  summarise(., meanpm25 = mean(`Daily AQI Value`))\n\nid.cty <- tigris::counties(state = \"ID\") %>%\n  st_transform(., crs = st_crs(aq.sum))\n```\n:::\n\n\n\n\n\n## Trend Surfaces\n\n### 0th Order Trend\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#set up interpolation grid\n# Create an empty grid where n is the total number of cells\ngrd <- st_make_grid(id.cty, n=150, \n                    what = \"centers\") %>%\n  st_as_sf() %>%\n  mutate(X = st_coordinates(.)[, 1], \n         Y = st_coordinates(.)[, 2])\n\n# Define the polynomial equation\nf.0  <- as.formula(meanpm25 ~ 1)\n\n# Run the regression model\nlm.0 <- lm( f.0 , data=aq.sum)\n\n# Use the regression model output to interpolate the surface\ngrd$var0.pred <- predict(lm.0, newdata = grd)\n# Use data.frame without geometry to convert to raster\ndat.0th <- grd %>%\n  select(X, Y, var0.pred) %>%\n  st_drop_geometry()\n\n# Convert to raster object to take advantage of rasterVis' imaging\n# environment\nr   <- rast(dat.0th, crs = crs(grd))\nr.m <- mask(r, st_as_sf(id.cty))\n\ntm_shape(r.m) + \n  tm_raster( title=\"Predicted air quality\") +\n  tm_shape(aq.sum) + \n  tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### First Order Trend\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the polynomial equation\nf.1  <- as.formula(meanpm25 ~ X + Y)\n\naq.sum$X <- st_coordinates(aq.sum)[,1]\naq.sum$Y <- st_coordinates(aq.sum)[,2]\n\n# Run the regression model\nlm.1 <- lm( f.1 , data=aq.sum)\n\n# Use the regression model output to interpolate the surface\ngrd$var1.pred <- predict(lm.1, newdata = grd)\n# Use data.frame without geometry to convert to raster\ndat.1st <- grd %>%\n  select(X, Y, var1.pred) %>%\n  st_drop_geometry()\n\n# Convert to raster object to take advantage of rasterVis' imaging\n# environment\nr   <- rast(dat.1st, crs = crs(grd))\nr.m <- mask(r, st_as_sf(id.cty))\n\ntm_shape(r.m) + \n  tm_raster( title=\"Predicted air quality\") +\n  tm_shape(aq.sum) + \n  tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### Second Order Trend\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the 1st order polynomial equation\nf.2 <- as.formula(meanpm25 ~ X + Y + I(X*X)+I(Y*Y) + I(X*Y))\n \n# Run the regression model\nlm.2 <- lm( f.2, data=aq.sum)\n\n# Use the regression model output to interpolate the surface\ngrd$var2.pred <- predict(lm.2, newdata = grd)\n# Use data.frame without geometry to convert to raster\ndat.2nd <- grd %>%\n  select(X, Y, var2.pred) %>%\n  st_drop_geometry()\n\nr   <- rast(dat.2nd, crs = crs(grd))\nr.m <- mask(r, st_as_sf(id.cty))\n\ntm_shape(r.m) + tm_raster(n=10, title=\"Predicted air quality\") +\n  tm_shape(aq.sum) + \n  tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Kriging\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naq.sum$res <- lm.2$residuals\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar.cld  <- gstat::variogram(res ~ 1, aq.sum, cloud = TRUE)\nvar.df  <- as.data.frame(var.cld)\nindex1  <- which(with(var.df, left==21 & right==2))\n\nOP <- par( mar=c(4,6,1,1))\nplot(var.cld$dist/1000 , var.cld$gamma, col=\"grey\", \n     xlab = \"Distance between point pairs (km)\",\n     ylab = expression( frac((res[2] - res[1])^2 , 2)) )\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the sample variogram, note the f.2 trend model is one of the parameters\n# passed to variogram(). This tells the function to create the variogram on\n# the de-trended data\nvar.smpl <- gstat::variogram(f.2, aq.sum, cloud = FALSE, cutoff = 1000000, width = 89900)\n\n\n# Compute the variogram model by passing the nugget, sill and range values\n# to fit.variogram() via the vgm() function.\ndat.fit  <- gstat::fit.variogram(var.smpl, gstat::vgm(nugget = 12, range= 60000, model=\"Gau\", cutoff=1000000))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in gstat::fit.variogram(var.smpl, gstat::vgm(nugget = 12, range =\n60000, : No convergence after 200 iterations: try different initial values?\n```\n\n\n:::\n\n```{.r .cell-code}\n# The following plot allows us to gauge the fit\nplot(var.smpl, dat.fit)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat.krg <- gstat::krige( formula = f.2, \n                         locations = aq.sum, \n                         newdata = grd[, c(\"X\", \"Y\", \"var2.pred\")], \n                         model = dat.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\ndat.krg.preds <-  dat.krg %>%\n  mutate(X = st_coordinates(.)[, 1], \n         Y = st_coordinates(.)[, 2]) %>%\n  select(X, Y, var1.pred) %>%\n  st_drop_geometry()\n\ndat.krg.var <-  dat.krg %>%\n  mutate(X = st_coordinates(.)[, 1], \n         Y = st_coordinates(.)[, 2]) %>%\n  select(X, Y, var1.var) %>%\n  st_drop_geometry()\n\nr <- rast(dat.krg.preds, crs = crs(grd))\nr.m <- mask(r, st_as_sf(id.cty))\n\nr.var <- rast(dat.krg.var, crs = crs(grd))\nr.m.var <- mask(r.var, st_as_sf(id.cty))\n\n# Plot the raster and the sampled points\ntm_shape(r.m) + tm_raster(n=10, title=\"Predicted air quality\") +tm_shape(aq.sum) + tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Playing with semivariograms\n\nWe tried changing the `model`, `nugget`, `range`, and `psill` arguments in `gstat::vgm`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the sample variogram, note the f.2 trend model is one of the parameters\n# passed to variogram(). This tells the function to create the variogram on\n# the de-trended data\nvar.smpl <- gstat::variogram(f.2, aq.sum, cloud = FALSE, cutoff = 1000000, width = 89900)\n\n\n# Compute the variogram model by passing the nugget, sill and range values\n# to fit.variogram() via the vgm() function.\ndat.fit  <- gstat::fit.variogram(var.smpl, gstat::vgm(model=\"Sph\", \n                                                      nugget = 10,\n                                                      range = 60000))\n\n# The following plot allows us to gauge the fit\nplot(var.smpl, dat.fit)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat.krg <- gstat::krige( formula = f.2, \n                         locations = aq.sum, \n                         newdata = grd[, c(\"X\", \"Y\", \"var2.pred\")], \n                         model = dat.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\ndat.krg.preds <-  dat.krg %>%\n  mutate(X = st_coordinates(.)[, 1], \n         Y = st_coordinates(.)[, 2]) %>%\n  select(X, Y, var1.pred) %>%\n  st_drop_geometry()\n\ndat.krg.var <-  dat.krg %>%\n  mutate(X = st_coordinates(.)[, 1], \n         Y = st_coordinates(.)[, 2]) %>%\n  select(X, Y, var1.var) %>%\n  st_drop_geometry()\n\nr <- rast(dat.krg.preds, crs = crs(grd))\nr.m <- mask(r, st_as_sf(id.cty))\n\nr.var <- rast(dat.krg.var, crs = crs(grd))\nr.m.var <- mask(r.var, st_as_sf(id.cty))\n\n# Plot the raster and the sampled points\ntm_shape(r.m) + tm_raster(n=10, title=\"Predicted air quality\") +tm_shape(aq.sum) + tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(r.m.var) + tm_raster(n=20, title=\"Variance\") +tm_shape(aq.sum) + tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n\n## Kriging with the First Order Trend\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the sample variogram, note the f.2 trend model is one of the parameters\n# passed to variogram(). This tells the function to create the variogram on\n# the de-trended data\nvar.smpl <- gstat::variogram(f.1, aq.sum, cloud = FALSE, cutoff = 1000000, width = 89900)\n\n\n# Compute the variogram model by passing the nugget, sill and range values\n# to fit.variogram() via the vgm() function.\ndat.fit  <- gstat::fit.variogram(var.smpl, gstat::vgm(model=\"Exp\", \n                                                      nugget = 20))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in gstat::fit.variogram(var.smpl, gstat::vgm(model = \"Exp\", nugget =\n20)): No convergence after 200 iterations: try different initial values?\n```\n\n\n:::\n\n```{.r .cell-code}\n# The following plot allows us to gauge the fit\nplot(var.smpl, dat.fit)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat.krg <- gstat::krige( formula = f.1, \n                         locations = aq.sum, \n                         newdata = grd[, c(\"X\", \"Y\", \"var1.pred\")], \n                         model = dat.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\ndat.krg.preds <-  dat.krg %>%\n  mutate(X = st_coordinates(.)[, 1], \n         Y = st_coordinates(.)[, 2]) %>%\n  select(X, Y, var1.pred) %>%\n  st_drop_geometry()\n\ndat.krg.var <-  dat.krg %>%\n  mutate(X = st_coordinates(.)[, 1], \n         Y = st_coordinates(.)[, 2]) %>%\n  select(X, Y, var1.var) %>%\n  st_drop_geometry()\n\nr <- rast(dat.krg.preds, crs = crs(grd))\nr.m <- mask(r, st_as_sf(id.cty))\n\nr.var <- rast(dat.krg.var, crs = crs(grd))\nr.m.var <- mask(r.var, st_as_sf(id.cty))\n\n# Plot the raster and the sampled points\ntm_shape(r.m) + tm_raster(n=10, title=\"Predicted air quality\") +tm_shape(aq.sum) + tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(r.m.var) + tm_raster(n=20, title=\"Variance\") +tm_shape(aq.sum) + tm_dots(size=0.2) +\n  tm_legend(legend.outside=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-19-example_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "session-19-example_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}