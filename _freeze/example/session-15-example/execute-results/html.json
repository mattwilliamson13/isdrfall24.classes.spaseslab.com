{
  "hash": "1fd85ad43c3eb31418cc2a1d98cc73ab",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Session 15 Code\"\nauthor: \"Carolyn Koehn\"\nformat: html\n---\n\n\n\n\nPlease install and load these packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('rgbif')\n\nlibrary(rgbif)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(spData)\n```\n:::\n\n\n\n\n## Create new spatial attributes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnz.sf <- nz %>% \n  mutate(area = st_area(nz))\nhead(nz.sf$area, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnits: [m^2]\n[1] 12890576439  4911565037 24588819863\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate random points\nrandom_long_lat <- \n  data.frame(\n    long = sample(runif(2000, min = 1090144, max = 2089533), replace = F),\n    lat = sample(runif(2000, min = 4748537, max = 6191874), replace = F)\n  )\n\nrandom_long_lat_sf <- random_long_lat %>% \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(nz))\n\nrandom_nz <- random_long_lat_sf[nz.sf,]\n\n# code from slides\nnz.df <- nz %>% \nmutate(counts = lengths(st_intersects(., random_nz)),\n       area = st_area(nz),\n       density = counts/area)\nhead(st_drop_geometry(nz.df[,7:10]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  counts              area              density\n1     20 12890576439 [m^2] 1.551521e-09 [1/m^2]\n2      4  4911565037 [m^2] 8.144044e-10 [1/m^2]\n3     40 24588819863 [m^2] 1.626756e-09 [1/m^2]\n4     21 12271015945 [m^2] 1.711350e-09 [1/m^2]\n5      9  8364554416 [m^2] 1.075969e-09 [1/m^2]\n6     18 14242517871 [m^2] 1.263821e-09 [1/m^2]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncanterbury = nz %>% filter(Name == \"Canterbury\")\ncanterbury_height = nz_height[canterbury, ]\nco = filter(nz, grepl(\"Canter|Otag\", Name))\nst_distance(nz_height[1:3, ], co)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnits: [m]\n          [,1]     [,2]\n[1,] 123537.16 15497.72\n[2,]  94282.77     0.00\n[3,]  93018.56     0.00\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tigris)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTo enable caching of data, set `options(tigris_use_cache = TRUE)`\nin your R script or .Rprofile.\n```\n\n\n:::\n\n```{.r .cell-code}\nua <- urban_areas(cb = FALSE, progress_bar = FALSE) %>% \n  filter(., UATYP10 == \"U\") %>% \n  filter(., str_detect(NAME10, \"ID\")) %>% \n  st_transform(., crs=2163)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRetrieving data for the year 2022\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in CPL_crs_from_input(x): GDAL Message 1: CRS EPSG:2163 is deprecated.\nIts non-deprecated replacement EPSG:9311 will be used instead. To use the\noriginal CRS, set the OSR_USE_NON_DEPRECATED configuration option to NO.\n```\n\n\n:::\n\n```{.r .cell-code}\n#get index of nearest ID city\nnearest <-  st_nearest_feature(ua)\n#estimate distance\n(dist = st_distance(ua, ua[nearest,], by_element=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnits: [m]\n[1]  61373.575  61373.575   1647.128   1647.128 136917.546 136917.546\n```\n\n\n:::\n\n```{.r .cell-code}\nua$dist_to_neighbor <- dist\n```\n:::\n\n\n\n\n### Topological Subsetting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nctby_height <-  nz_height[canterbury, ]\n\nctby_height_diffpred <- nz_height[canterbury, ,op=st_touches]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncanterbury_height3 = nz_height %>%\n  filter(st_intersects(x = ., y = canterbury, sparse = FALSE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using one column matrices in `filter()` was deprecated in dplyr 1.1.0.\nℹ Please use one dimensional logical vectors instead.\n```\n\n\n:::\n\n```{.r .cell-code}\n# to fix warning\ncanterbury_height3 = nz_height %>%\n  filter(as.vector(st_intersects(x = ., y = canterbury, sparse = FALSE)))\n```\n:::\n\n\n\n\n### Spatial Joins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2018)\n(bb = st_bbox(world)) # the world's bounds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      xmin       ymin       xmax       ymax \n-180.00000  -89.90000  179.99999   83.64513 \n```\n\n\n:::\n\n```{.r .cell-code}\n#>   xmin   ymin   xmax   ymax \n#> -180.0  -89.9  180.0   83.6\n\nrandom_df = data.frame(\n  x = runif(n = 10, min = bb[1], max = bb[3]),\n  y = runif(n = 10, min = bb[2], max = bb[4])\n)\nrandom_points <- random_df %>% \n  st_as_sf(coords = c(\"x\", \"y\")) %>% # set coordinates\n  st_set_crs(\"EPSG:4326\") # set geographic CRS\n\nrandom_joined = st_join(random_points, world[\"name_long\"])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(st_touches(cycle_hire, cycle_hire_osm, sparse = FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nz = st_join(cycle_hire, cycle_hire_osm, st_is_within_distance, dist = 20)\nnrow(cycle_hire)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 742\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- st_read(system.file(\"shape/nc.shp\", package=\"sf\")) %>%\n  st_transform(crs=4326)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `C:\\Users\\carolynkoehn\\AppData\\Local\\R\\cache\\R\\renv\\cache\\v5\\R-4.3\\x86_64-w64-mingw32\\sf\\1.0-16\\ad57b543f7c3fca05213ba78ff63df9b\\sf\\shape\\nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n\n```{.r .cell-code}\nbb <- st_bbox(nc)\nnc_points <- data.frame(\n  x = runif(n = 2, min = bb[1], max = bb[3]),\n  y = runif(n = 2, min = bb[2], max = bb[4])\n) %>%\n  st_as_sf(., coords = c(\"x\", \"y\"), crs=4326)\ntr_buff <- st_buffer(nc_points, units::set_units(100, \"km\")) %>%\n  st_transform(crs=4326)\n\nintersect_pct <- st_intersection(nc, tr_buff) %>% \n   mutate(intersect_area = st_area(.)) %>%   # create new column with shape area\n   dplyr::select(NAME, intersect_area) %>%   # only select columns needed to merge\n   st_drop_geometry()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nnc <- mutate(nc, county_area = st_area(nc))\n\n# Merge by county name\nnc <- left_join(nc, intersect_pct)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(NAME)`\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate coverage\nnc <- nc %>% \n   mutate(coverage = as.numeric(intersect_area/county_area)) %>%\n  mutate(coverage = ifelse(test = is.na(coverage),\n                           yes = 0,\n                           no = coverage))\n\nplot(nc[\"coverage\"])\n```\n\n::: {.cell-output-display}\n![](session-15-example_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n### Practice\n\nWhat is the relationship between observations of golden eagles and distance to a main road?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidaho <- tigris::states(progress_bar = FALSE) %>%\n  filter(NAME == \"Idaho\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRetrieving data for the year 2021\n```\n\n\n:::\n\n```{.r .cell-code}\n# get a selection of 1000 observations from rgbif\ngold_eagles_us <- occ_search(scientificName = \"Aquila chrysaetos\", \n                    country = \"US\",\n                    hasCoordinate = TRUE,\n                    limit=1000)\n\n# This step has to be separate, it can't be piped into the next bit of code\ngold_eagles_us <- gold_eagles_us$data\n\n# convert to spatial object\ngold_eagle_dat_sf <- gold_eagles_us %>%\n  filter(!is.na(decimalLatitude) & !is.na(decimalLongitude)) %>%\n  st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"), crs = 4326)\n\n# get roads\nroads <- tigris::primary_secondary_roads(\"ID\", progress_bar = FALSE) %>%\n  st_transform(crs=4326)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRetrieving data for the year 2022\n```\n\n\n:::\n\n```{.r .cell-code}\n# check plot\nplot(st_geometry(idaho))\nplot(st_geometry(roads), col=\"red\", add=TRUE)\nplot(st_geometry(gold_eagle_dat_sf), add=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-15-example_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# spatial subset to points in Idaho\nidaho <- st_transform(idaho, crs=4326)\n\ngold_eagle_dat_sf_id <- gold_eagle_dat_sf[idaho, ]\n\n# check plot\nplot(st_geometry(idaho))\nplot(st_geometry(roads), col=\"red\", add=TRUE)\nplot(st_geometry(gold_eagle_dat_sf_id), add=TRUE)\n```\n\n::: {.cell-output-display}\n![](session-15-example_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# get nearest road for each point\nnearest_road <- st_nearest_feature(gold_eagle_dat_sf_id, roads)\n\n# get distance to nearest road for each point\ngold_eagle_dat_sf_id <- gold_eagle_dat_sf_id %>%\n  mutate(dist_to_road = st_distance(., roads[nearest_road,], by_element = TRUE))\n\n# now we can investigate\n# for example...\nhist(gold_eagle_dat_sf_id$dist_to_road)\n```\n\n::: {.cell-output-display}\n![](session-15-example_files/figure-html/unnamed-chunk-12-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "session-15-example_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}