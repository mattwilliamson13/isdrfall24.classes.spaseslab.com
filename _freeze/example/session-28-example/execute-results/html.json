{
  "hash": "18a52344560415c92ecf979ba8d55ebb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Climate, social, and environmental justice markers for the Pacific Northwest\"\noutput: html\n---\n\n\n\n\nThe YAML header for the app is:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"Climate, social, and environmental justice markers for the Pacific Northwest\"\noutput: flexdashboard::flex_dashboard\nruntime: shiny\n---\n```\n:::\n\n\n\n\n`global` code chunk:\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r global}}\n#| eval: false\n# replace 'eval:false' with 'include: false'\n\nlibrary(shiny)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\ntmap_mode(\"view\")\n\ncejst <- st_read(\"/opt/data/data/assignment01/cejst_nw.shp\")\n\n# get column codes and meanings\ncol_choices <- read_csv(\"/opt/data/data/assignment04/columns.csv\") %>%\n  # make nicer column names for a display table\n  rename(\"Code\" = \"shapefile_column\", \"Description\" = \"column_name\") %>%\n  # keep only \"percentile\" type columns\n  filter(str_detect(Code, \"PFS\"))\n```\n````\n:::\n\n\n\n\nCreate a sidebar column:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nColumn {.sidebar}\n-----------------------------------------------------------------------\n\nSelect the cejst marker:\n```\n:::\n\n\n\n\nAdd code chunk with inputs under the sidebar column:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Box with choices: which cejst column to map\nselectInput(\"column_select\", \n            label = \"Justice Marker:\",\n            choices = col_choices$Code, \n            selected = \"DF_PFS\")\n\n# Two sliders to select the maximum and minimum values to map\nsliderInput(\"min_threshold_adjust\", \n            label = \"Minimum value:\",\n            min = 0, \n            max = 1, \n            value = 0.5, \n            step = 0.05)\nsliderInput(\"max_threshold_adjust\", label = \"Maximum value:\",\n            min = 0, max = 1, value = 1, step = 0.05)\n```\n:::\n\n\n\n\nAdd table in sidebar:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(col_choices[,1:2])\n```\n:::\n\n\n\n\nAdd another column for map display:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nColumn\n-----------------------------------------------------------------------\n\n### Climate, Social, and Environmental Justice\n```\n:::\n\n\n\n\nRender map with filters based on user inputs:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# renderTmap is a tmap special case of renderPlot\nrenderTmap({\n  # put reactively filtered data in tm_shape\n  tm_shape(subset(cejst[, input$column_select], # subset data to user's column\n                  # use the subset in the filtering steps, selecting the column of data with [[1]]\n                  cejst[, input$column_select][[1]] <= input$max_threshold_adjust & # data column should be less than or equal to the user's max threshold\n                    cejst[, input$column_select][[1]] >= input$min_threshold_adjust)) + #more than or equal to the min threshold\n    # add the polygons filled by the user's selected column\n    tm_polygons(col = input$column_select)\n})\n```\n:::\n\n\n\n\nYou can test your code by creating the \"base\" plot first, then adding the `input$` reactive elements later.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how to test your code\ntm_shape(subset(cejst[, \"DF_PFS\"], \n                  cejst[, \"DF_PFS\"][[1]] <= 1 &\n                    cejst[, \"DF_PFS\"][[1]] >= 0.5)) +\n    tm_polygons(col = \"DF_PFS\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}